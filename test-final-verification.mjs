#!/usr/bin/env node

/**
 * Final verification test for mock chat messages
 * Tests auto-clear functionality and message display
 */

import { chromium } from '@playwright/test';

async function verifyMockChat() {
  console.log('üéØ Final Verification Test for Mock Chat\n');

  const browser = await chromium.launch({ headless: false });
  const context = await browser.newContext();
  const page = await context.newPage();

  try {
    // Set up console logging
    page.on('console', msg => {
      if (msg.text().includes('[ChatWidget]')) {
        console.log('  üìù', msg.text());
      }
    });

    // Navigate to the page
    console.log('1Ô∏è‚É£  Navigating to http://localhost:3000');
    await page.goto('http://localhost:3000', { waitUntil: 'networkidle' });
    await page.waitForTimeout(1000);

    // Add a fake old conversationId to test auto-clear
    console.log('2Ô∏è‚É£  Adding fake old conversationId to test auto-clear...');
    await page.evaluate(() => {
      sessionStorage.setItem('chat_conversation_id', 'old-fake-id-from-supabase');
    });

    // Find and click chat button
    console.log('3Ô∏è‚É£  Opening chat widget...');
    const chatButton = page.locator('[data-chat-open], button:has-text("„ÉÅ„É£„ÉÉ„Éà")').first();

    if (await chatButton.count() > 0) {
      await chatButton.click();
      await page.waitForTimeout(3000); // Wait for initialization
    }

    // Check for chat widget
    const chatWidget = page.locator('div[role="dialog"][aria-label*="„ÉÅ„É£„ÉÉ„Éà"]');

    if (await chatWidget.count() === 0) {
      console.log('‚ùå Chat widget not found');
      await browser.close();
      return;
    }

    console.log('4Ô∏è‚É£  Chat widget opened successfully\n');

    // Wait for messages to load
    await page.waitForTimeout(2000);

    // Check for messages
    const messageElements = page.locator('div[role="log"] .rounded-2xl');
    const messageCount = await messageElements.count();

    console.log('üìä Results:');
    console.log(`  üí¨ Total messages: ${messageCount}`);

    if (messageCount === 6) {
      console.log('  ‚úÖ Correct number of messages (6)');

      // Get all message texts
      const messages = await page.locator('div[role="log"] .rounded-2xl p.text-sm').allTextContents();

      console.log('\nüìù Message Timeline:');
      messages.forEach((msg, i) => {
        const role = i === 0 ? '„Ç∑„Çπ„ÉÜ„É†' : i % 2 === 1 ? '„É¶„Éº„Ç∂„Éº' : 'ÈÅãÂñ∂';
        const preview = msg.substring(0, 40).replace(/\n/g, ' ');
        console.log(`  ${i + 1}. [${role}] ${preview}${msg.length > 40 ? '...' : ''}`);
      });

      // Verify message content
      const expectedMessages = [
        '„Åì„Çì„Å´„Å°„ÅØÔºÅÈ£≤È£üÂ∫óÊíÆÂΩ±PhotoStudio„Å∏„Çà„ÅÜ„Åì„Åù',
        'ÊñôÈáë„Å´„Å§„ÅÑ„Å¶Êïô„Åà„Å¶„Åè„Å†„Åï„ÅÑ',
        '„ÅäÂïè„ÅÑÂêà„Çè„Åõ„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô',
        '„Çπ„Çø„É≥„ÉÄ„Éº„Éâ„Éó„É©„É≥„ÅßÊ§úË®é„Åó„Å¶„ÅÑ„Åæ„Åô',
        'ÊíÆÂΩ±„ÅÆÊµÅ„Çå„Çí„ÅîË™¨Êòé„Åï„Åõ„Å¶„ÅÑ„Åü„Å†„Åç„Åæ„Åô',
        '„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„ÅôÔºÅÊù•ÈÄ±„ÅÆÊíÆÂΩ±„Çí„ÅäÈ°ò„ÅÑ„Åß„Åç„Åæ„Åô„Åã'
      ];

      let allCorrect = true;
      expectedMessages.forEach((expected, i) => {
        if (!messages[i]?.includes(expected.substring(0, 20))) {
          console.log(`  ‚ö†Ô∏è  Message ${i + 1} doesn't match expected content`);
          allCorrect = false;
        }
      });

      if (allCorrect) {
        console.log('\n‚úÖ ‚úÖ ‚úÖ SUCCESS! All messages are displaying correctly! ‚úÖ ‚úÖ ‚úÖ\n');
        console.log('„ÉÅ„É£„ÉÉ„Éà„Çø„Ç§„É†„É©„Ç§„É≥„Å´‰ª•‰∏ã„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Åæ„ÅôÔºö');
        console.log('  - „Ç∑„Çπ„ÉÜ„É†„É°„ÉÉ„Çª„Éº„Ç∏Ôºà„Ç¶„Çß„É´„Ç´„É†„É°„ÉÉ„Çª„Éº„Ç∏Ôºâ');
        console.log('  - „É¶„Éº„Ç∂„Éº„Åã„Çâ„ÅÆË≥™ÂïèÔºà3‰ª∂Ôºâ');
        console.log('  - ÈÅãÂñ∂„Åã„Çâ„ÅÆÂõûÁ≠îÔºà2‰ª∂Ôºâ');
        console.log('\n„É¢„ÉÉ„ÇØ„É¢„Éº„Éâ„ÅåÊ≠£Â∏∏„Å´Âãï‰Ωú„Åó„Å¶„ÅÑ„Åæ„ÅôÔºÅ\n');
      } else {
        console.log('\n‚ö†Ô∏è  Messages are displaying but content doesn\'t match exactly\n');
      }
    } else {
      console.log(`  ‚ùå Expected 6 messages, but got ${messageCount}`);

      if (messageCount > 0) {
        const messages = await page.locator('div[role="log"] .rounded-2xl p.text-sm').allTextContents();
        console.log('\n  Found messages:');
        messages.forEach((msg, i) => {
          console.log(`    ${i + 1}. ${msg.substring(0, 50)}`);
        });
      }

      // Take screenshot for debugging
      await page.screenshot({ path: '/tmp/chat-verification-failed.png' });
      console.log('\n  üì∏ Screenshot saved to /tmp/chat-verification-failed.png');
    }

    // Keep browser open for inspection
    console.log('\n‚è∏Ô∏è  Keeping browser open for 20 seconds for inspection...');
    await page.waitForTimeout(20000);

  } catch (error) {
    console.error('\n‚ùå Test failed with error:', error.message);
    await page.screenshot({ path: '/tmp/chat-verification-error.png' });
    console.log('üì∏ Error screenshot saved to /tmp/chat-verification-error.png');
  } finally {
    await browser.close();
  }
}

verifyMockChat().catch(console.error);
